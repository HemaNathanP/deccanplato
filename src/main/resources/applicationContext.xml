<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing
	infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving
	up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<context:component-scan base-package="org.megam.mammoth" />
	<tx:annotation-driven />
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json"/>
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
			</list>
		</property>
	</bean>

	<!-- If no extension matched, use Tiles view -->
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="order" value="1" />
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
	</bean>
	<bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
	id="tilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
				<!-- Scan views directory for Tiles configurations -->
				<value>/WEB-INF/**/tiles.xml</value>
			</list>
		</property>
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Use a Compute Cloud -->
	<bean id="computeCloud" class="org.megam.mammoth.cloud.compute.DefaultComputeCloud" scope="singleton">
		<property name="computeCloudSource" ref="computeCloudSource" />
	</bean>

	<!-- Load the Amazon EC2 properties -->
	<context:property-placeholder location="classpath:aws.properties"/>

	<!-- Wire a base cloud compute source  -->
	<bean id="baseCloudSource" abstract="true"
	class="org.megam.mammoth.cloud.compute.info.ComputeCloudSource">
		<property name="region" value="${ccls.region}"/>
		<property name="secretkey" value="${ccls.secretkey}"/>
		<property name="accesskey" value="${ccls.accesskey}"/>
		<property name="computeEngineClassName" value="${ccls.computeEngineClassName}"/>
	</bean>

	<!-- Wire a cloud compute source - AMAZON EC2. stupid to inherit. cleanup later-->
	<bean id="computeCloudSource" parent="baseCloudSource"
	class="org.megam.mammoth.cloud.compute.info.BasicCloudComputeSource">
		<property name="instanceType" value="${ccls.instance_type}"/>
		<property name="imageId" value="${ccls.image_id}"/>
		<property name="instanceId" value="${ccls.instance_id}"/>
	</bean>

	<!-- Use HSQLDB by default -->
	<beans profile="default">
		<jdbc:embedded-database id="dataSource" />
		<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="jpaVendorAdapter">
				<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
			</property>
			<property name="jpaProperties">
				<props>
					<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
					<prop key="hibernate.hbm2ddl.auto">create</prop>
				</props>
			</property>
		</bean>
	</beans>

	<!-- Use Postgres in production (i.e. on Heroku) -->
	<beans profile="prod">
		<bean class="java.net.URI" id="dbUrl">
			<constructor-arg value="#{systemEnvironment['DATABASE_URL']}" />
		</bean>
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="url"
			value="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + @dbUrl.getPath() }" />
			<property name="username" value="#{ @dbUrl.getUserInfo().split(':')[0] }" />
			<property name="password" value="#{ @dbUrl.getUserInfo().split(':')[1] }" />
		</bean>
		<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="jpaVendorAdapter">
				<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
			</property>
			<property name="jpaProperties">
				<props>
					<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
					<prop key="hibernate.show_sql">true</prop>
					<!-- change this to 'verify' before running as a production app -->
					<prop key="hibernate.hbm2ddl.auto">update</prop>
				</props>
			</property>
		</bean>
	</beans>
</beans>
