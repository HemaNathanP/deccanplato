<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
xmlns:security="http://www.springframework.org/schema/security"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd">

	<import resource="classpath:/META-INF/providers.xml" />

	<!--AWS Property Configurer
	<bean id="awsPropertyConfigurer"
	class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
	<list>
	<value>classpath:aws.properties</value>
	</list>
	</property>
	</bean>

	Use a Compute Cloud
	<bean id="computeCloud" class="org.megam.mammoth.cloud.compute.DefaultComputeCloud" scope="singleton">
	<property name="computeCloudSource" ref="computeCloudSource" />
	</bean>

	Wire a base cloud compute source
	<bean id="baseCloudSource" abstract="true"
	class="org.megam.mammoth.cloud.compute.info.ComputeCloudSource">
	<property name="region" value="${ccls.region}"/>
	<property name="secretkey" value="${ccls.secretkey}"/>
	<property name="accesskey" value="${ccls.accesskey}"/>
	<property name="computeEngineClassName" value="${ccls.computeEngineClassName}"/>
	</bean>

	Wire a cloud compute source - AMAZON EC2. stupid to inherit. cleanup later
	<bean id="computeCloudSource" parent="baseCloudSource"
	class="org.megam.mammoth.cloud.compute.info.BasicCloudComputeSource">
	<property name="instanceType" value="${ccls.instance_type}"/>
	<property name="imageId" value="${ccls.image_id}"/>
	<property name="instanceId" value="${ccls.instance_id}"/>
	</bean>

	-->
	<bean id="providerRegistry" class="org.megam.deccanplato.provider.ProviderRegistry" factory-method="newInstance" >
		<property name="providersMap">
			<map>
				<entry key="salesforce" value-ref="salesforce" />
				<entry key="zohocrm" value-ref="zoho" />
				<entry key="sugarcrm" value-ref="sugarcrm" />
				<entry key="googleapp" value-ref="googleapp" />
				<entry key="xero" value-ref="xero" />
				<entry key="box" value-ref="box" />
				<entry key="dropbox" value-ref="dropbox" />
			</map>
		</property>
		<property name="bizActivityMap">
			<map>
				<entry key="salesforce">
					<set>
						<bean class="org.megam.deccanplato.provider.salesforce.handler.UserImpl"/>
						<bean class="org.megam.deccanplato.provider.salesforce.handler.AccountImpl"/>
						<bean class="org.megam.deccanplato.provider.salesforce.handler.LeadsImpl"/>
					</set>
				</entry>
				<entry key="zoho">
					<set>
						<bean class="org.megam.deccanplato.provider.zoho.crm.handler.AccountImpl"/>
						<bean class="org.megam.deccanplato.provider.zoho.crm.handler.LeadsImpl"/>
					</set>
				</entry>
				<entry key="sugarcrm">
					<set>
						<bean class="org.megam.deccanplato.provider.sugarcrm.handler.UserImpl"/>
						<bean class="org.megam.deccanplato.provider.sugarcrm.handler.AccountImpl"/>
					</set>
				</entry>
				<entry key="googleapp">
					<set>
						<bean class="org.megam.deccanplato.provider.googleapp.handler.UserImpl"/>
					</set>
				</entry>
				<entry key="xero">
					<set>
						<bean class="org.megam.deccanplato.provider.xero.handler.AccountImpl"/>
					</set>
				</entry>
				<entry key="box">
					<set>
						<bean class="org.megam.deccanplato.provider.box.handler.FileImpl"/>
					</set>
				</entry>
				<entry key="dropbox">
					<set>
						<bean class="org.megam.deccanplato.provider.dropbox.handler.FileImpl"/>
					</set>
				</entry>
			</map>
		</property>
	</bean>
</beans>